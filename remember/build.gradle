buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
//        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

def versionMajor = 2
def versionMinor = 0
def versionPatch = 2
def versionBuild = 0

def version_code = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
def version_name = "${versionMajor}.${versionMinor}.${versionPatch}"

ext {
    bintrayRepo = 'android'
    bintrayName = 'remember'

    publishedGroupId = 'com.allenchankl'
    libraryName = 'Remember'
    artifact = 'remember'

    libraryDescription = 'An in-memory data store backed by shared preferences, for Android.'

    siteUrl = 'https://github.com/allenchankl/remember2'
    gitUrl = 'https://github.com/allenchankl/remember2.git'
    issueTrackerUrl = 'https://github.com/allenchankl/remember2/issues'

    libraryVersion = version_name

    developerId = 'allenchankl'
    developerName = 'Allen Chan'
    developerEmail = 'allen517@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

group = publishedGroupId                               // Maven Group ID for the artifact
version = version_name

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode version_code
        versionName version_name
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//////////////////
// Maven
//////////////////

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact
                version version_name

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

////////////////////////
// Bintray configuration
////////////////////////

//def groupId = project.PUBLISH_GROUP_ID
//def artifactId = project.PUBLISH_ARTIFACT_ID
//def version = project.PUBLISH_VERSION
//version = libraryVersion

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task generateRelease << {
    println "Release ${libraryVersion} can be found at ${localReleaseDest}/"
    println "Release ${libraryVersion} zipped can be found ${buildDir}/release-${libraryVersion}.zip"
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    // First try to read from local.properties
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    def gpgpassphrase = properties.getProperty("bintray.gpg.password")

    // If the properties aren't set in a properties file, load from environment (needed for CI)
    if (user == null) {
        user = System.getenv('BINTRAY_USERNAME')
    }
    if (key == null) {
        key = System.getenv('BINTRAY_APIKEY')
    }
    if (gpgpassphrase == null) {
        gpgpassphrase = System.getenv('BINTRAY_GPG_PASSPHRASE')
    }

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = siteUrl
        licenses = allLicenses
        libraryVersion = libraryVersion
        publish = true
        publicDownloadNumbers = true
        version {
            name = version_name
            desc = libraryDescription
            vcsTag = version_name
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = gpgpassphrase
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}